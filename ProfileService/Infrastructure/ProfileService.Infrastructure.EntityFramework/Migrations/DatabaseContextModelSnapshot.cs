// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ProfileService.Infrastructure.EntityFramework;

#nullable disable

namespace ProfileService.Infrastructure.EntityFramework.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ProfileService.Domain.Entities.Achievement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid>("ProfileInfoId")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ProfileInfoId");

                    b.ToTable("Achievements");
                });

            modelBuilder.Entity("ProfileService.Domain.Entities.FileAchievement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AchievementId")
                        .HasColumnType("integer");

                    b.Property<Guid>("FileId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AchievementId");

                    b.ToTable("FilesAchievement");
                });

            modelBuilder.Entity("ProfileService.Domain.Entities.LevelTraining", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("LevelsTraining");
                });

            modelBuilder.Entity("ProfileService.Domain.Entities.Position", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Positions");
                });

            modelBuilder.Entity("ProfileService.Domain.Entities.ProfileInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("Gender")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCurrentVersion")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Patronymic")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<Guid?>("PhotoId")
                        .HasColumnType("uuid");

                    b.Property<int>("ProfileType")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Surname")
                        .HasColumnType("text");

                    b.Property<string>("TelegramName")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UpdatedUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("Username")
                        .HasColumnType("text");

                    b.Property<int>("VersionNumber")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProfileType", "IsCurrentVersion");

                    b.ToTable("Profiles", (string)null);

                    b.HasDiscriminator<int>("ProfileType").HasValue(2);

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("ProfileService.Domain.Entities.TypeSportEquipment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("TypesSportEquipment");
                });

            modelBuilder.Entity("ProfileService.Domain.Entities.TypeSportEquipmentProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("LevelTrainingId")
                        .HasColumnType("integer");

                    b.Property<Guid>("ProfileId")
                        .HasColumnType("uuid");

                    b.Property<int?>("TypeSportEquipmentId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("LevelTrainingId");

                    b.HasIndex("ProfileId");

                    b.HasIndex("TypeSportEquipmentId");

                    b.ToTable("TypesSportEquipmentProfiles");
                });

            modelBuilder.Entity("ProfileService.Domain.Entities.ClientProfileInfo", b =>
                {
                    b.HasBaseType("ProfileService.Domain.Entities.ProfileInfo");

                    b.Property<Guid?>("OwnerProfileInfoId")
                        .HasColumnType("uuid");

                    b.HasIndex("OwnerProfileInfoId")
                        .IsUnique();

                    b.HasDiscriminator().HasValue(0);
                });

            modelBuilder.Entity("ProfileService.Domain.Entities.InstructorProfileInfo", b =>
                {
                    b.HasBaseType("ProfileService.Domain.Entities.ProfileInfo");

                    b.Property<DateTime?>("DateDismissal")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("ExperienceBeforeHiring")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("HireDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("PositionId")
                        .HasColumnType("integer");

                    b.HasIndex("PositionId");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("ProfileService.Domain.Entities.Achievement", b =>
                {
                    b.HasOne("ProfileService.Domain.Entities.ProfileInfo", "ProfileInfo")
                        .WithMany("Achievements")
                        .HasForeignKey("ProfileInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProfileInfo");
                });

            modelBuilder.Entity("ProfileService.Domain.Entities.FileAchievement", b =>
                {
                    b.HasOne("ProfileService.Domain.Entities.Achievement", "Achievement")
                        .WithMany("FilesAchievement")
                        .HasForeignKey("AchievementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Achievement");
                });

            modelBuilder.Entity("ProfileService.Domain.Entities.TypeSportEquipmentProfile", b =>
                {
                    b.HasOne("ProfileService.Domain.Entities.LevelTraining", "LevelTraining")
                        .WithMany("TypeSportEquipmentProfile")
                        .HasForeignKey("LevelTrainingId");

                    b.HasOne("ProfileService.Domain.Entities.ProfileInfo", "ProfileInfo")
                        .WithMany("TypeSportEquipmentProfile")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProfileService.Domain.Entities.TypeSportEquipment", "TypeSportEquipment")
                        .WithMany("TypeSportEquipmentProfile")
                        .HasForeignKey("TypeSportEquipmentId");

                    b.Navigation("LevelTraining");

                    b.Navigation("ProfileInfo");

                    b.Navigation("TypeSportEquipment");
                });

            modelBuilder.Entity("ProfileService.Domain.Entities.ClientProfileInfo", b =>
                {
                    b.HasOne("ProfileService.Domain.Entities.ProfileInfo", "ProfileInfo")
                        .WithOne("OwnerProfileInfo")
                        .HasForeignKey("ProfileService.Domain.Entities.ClientProfileInfo", "OwnerProfileInfoId");

                    b.Navigation("ProfileInfo");
                });

            modelBuilder.Entity("ProfileService.Domain.Entities.InstructorProfileInfo", b =>
                {
                    b.HasOne("ProfileService.Domain.Entities.Position", "Position")
                        .WithMany()
                        .HasForeignKey("PositionId");

                    b.Navigation("Position");
                });

            modelBuilder.Entity("ProfileService.Domain.Entities.Achievement", b =>
                {
                    b.Navigation("FilesAchievement");
                });

            modelBuilder.Entity("ProfileService.Domain.Entities.LevelTraining", b =>
                {
                    b.Navigation("TypeSportEquipmentProfile");
                });

            modelBuilder.Entity("ProfileService.Domain.Entities.ProfileInfo", b =>
                {
                    b.Navigation("Achievements");

                    b.Navigation("OwnerProfileInfo");

                    b.Navigation("TypeSportEquipmentProfile");
                });

            modelBuilder.Entity("ProfileService.Domain.Entities.TypeSportEquipment", b =>
                {
                    b.Navigation("TypeSportEquipmentProfile");
                });
#pragma warning restore 612, 618
        }
    }
}
